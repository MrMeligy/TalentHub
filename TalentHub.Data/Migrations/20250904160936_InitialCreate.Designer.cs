// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TalentHub.Data;

#nullable disable

namespace TalentHub.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250904160936_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TalentHub.Core.Entities.Academy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Describtion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Is_Partner")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Academies");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.AcademyTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgeGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId", "AgeGroup")
                        .IsUnique();

                    b.ToTable("AcademyTeams");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AwayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AwayScore")
                        .HasColumnType("int");

                    b.Property<Guid>("HomeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HomeScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("Kickoff")
                        .HasColumnType("datetime2");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AwayId");

                    b.HasIndex("HomeId", "AwayId", "Kickoff");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademyTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("FavouriteFoot")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("ShirtNumber")
                        .HasColumnType("int");

                    b.Property<int>("SuccessTackles")
                        .HasColumnType("int");

                    b.Property<int>("TotalAssists")
                        .HasColumnType("int");

                    b.Property<int>("TotalGoals")
                        .HasColumnType("int");

                    b.Property<int>("TotalInterceptions")
                        .HasColumnType("int");

                    b.Property<int>("TotalMatches")
                        .HasColumnType("int");

                    b.Property<int>("TotalMinutes")
                        .HasColumnType("int");

                    b.Property<int>("TotalSaves")
                        .HasColumnType("int");

                    b.Property<int>("TotalTackles")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademyTeamId", "ShirtNumber")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.PlayerMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademyTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("Interceptions")
                        .HasColumnType("int");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("Saves")
                        .HasColumnType("int");

                    b.Property<int>("SuccessTackles")
                        .HasColumnType("int");

                    b.Property<int>("Tackles")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademyTeamId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("MatchId", "PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerMatches");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.PlayerSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId", "Skill")
                        .IsUnique();

                    b.ToTable("PlayerSkills");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.AcademyTeam", b =>
                {
                    b.HasOne("TalentHub.Core.Entities.Academy", "Academy")
                        .WithMany("AcademyTeams")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.Match", b =>
                {
                    b.HasOne("TalentHub.Core.Entities.AcademyTeam", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TalentHub.Core.Entities.AcademyTeam", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.Player", b =>
                {
                    b.HasOne("TalentHub.Core.Entities.AcademyTeam", "AcademyTeam")
                        .WithMany("Players")
                        .HasForeignKey("AcademyTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyTeam");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.PlayerMatch", b =>
                {
                    b.HasOne("TalentHub.Core.Entities.AcademyTeam", "AcademyTeam")
                        .WithMany()
                        .HasForeignKey("AcademyTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TalentHub.Core.Entities.Match", "Match")
                        .WithMany("PlayerMatches")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TalentHub.Core.Entities.Player", "Player")
                        .WithMany("PlayerMatches")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyTeam");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.PlayerSkill", b =>
                {
                    b.HasOne("TalentHub.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.Academy", b =>
                {
                    b.Navigation("AcademyTeams");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.AcademyTeam", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.Match", b =>
                {
                    b.Navigation("PlayerMatches");
                });

            modelBuilder.Entity("TalentHub.Core.Entities.Player", b =>
                {
                    b.Navigation("PlayerMatches");
                });
#pragma warning restore 612, 618
        }
    }
}
